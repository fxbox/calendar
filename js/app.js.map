{"version":3,"file":"app.js","sources":["../../\u0000babelHelpers","controllers/base.js","views/user-login.jsx","controllers/users.js","views/reminders/reminder-item.jsx","views/reminders.jsx","views/microphone.jsx","controllers/reminders.js","lib/common/event-dispatcher.js","lib/wakeword/recogniser.js","lib/speech/recogniser.js","lib/speech/synthesis.js","lib/intent-parser/confirmation.js","lib/intent-parser.js","lib/speech-controller.js","lib/server/settings.js","lib/common/errors.js","lib/server/network.js","lib/server/webpush.js","lib/server/api.js","lib/server/reminders.js","lib/server/index.js","controllers/main.js","app.js"],"sourcesContent":["var babelHelpers = {};\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nexport var jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nexport var asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nexport var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexport var createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexport var defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nexport var defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nexport var defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nexport var inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nexport var interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nexport var interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nexport var newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nexport var objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nexport var objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nexport var possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nexport var selfGlobal = typeof global === \"undefined\" ? self : global;\n\nexport var set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nexport var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexport var slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nexport var taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nexport var taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nexport var temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nexport var temporalUndefined = {};\n\nexport var toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nexport var toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nbabelHelpers;\n\nexport { _typeof as typeof, _extends as extends, _instanceof as instanceof }","export default class BaseController {\n  constructor(properties) {\n    Object.assign(this, properties || {});\n  }\n\n  main() {\n    throw new Error('Not implemented!');\n  }\n}\n","import React from 'components/react';\n\nexport default class UserLogin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: 'mozilla',\n    };\n\n    this.server = props.server;\n\n    this.onChange = this.onChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onChange(evt) {\n    const login = evt.target.value;\n    this.setState({ login });\n  }\n\n  onFormSubmit(evt) {\n    evt.preventDefault(); // Avoid redirection to /?.\n\n    this.server.login(this.state.login, 'password')\n      .then(() => {\n        location.hash = 'reminders';\n      });\n  }\n\n  render() {\n    return (\n      <form className=\"user-login\" onSubmit={this.onFormSubmit}>\n        <input value={this.state.login}\n               placeholder=\"Family name\"\n               className=\"user-login__name-field\"\n               onChange={this.onChange}/>\n        <button className=\"user-login__login-button\">\n          <img src=\"css/icons/next.svg\"/>\n        </button>\n      </form>\n    );\n  }\n}\n\nUserLogin.propTypes = {\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\nimport ReactDOM from 'components/react-dom';\n\nimport BaseController from './base';\nimport UserLogin from '../views/user-login';\n\nconst ALLOWED_ACTIONS = ['login', 'logout'];\nconst DEFAULT_ACTION = ALLOWED_ACTIONS[0];\n\nexport default class UsersController extends BaseController {\n  main(action = DEFAULT_ACTION) {\n    if (!ALLOWED_ACTIONS.includes(action)) {\n      console.error(\n        `Bad users route: \"${action}\". Falling back to ${DEFAULT_ACTION}.`\n      );\n      action = DEFAULT_ACTION;\n    }\n\n    switch (action) {\n      case 'login':\n        this.login();\n        break;\n\n      case 'logout':\n        this.logout();\n        break;\n    }\n  }\n\n  login() {\n    ReactDOM.render(\n      React.createElement(UserLogin, { server: this.server }), this.mountNode\n    );\n  }\n\n  logout() {\n    this.server.logout()\n      .then(() => {\n        // Once logged out, we redirect to the login page.\n        location.hash = 'users/login';\n      });\n  }\n}\n","/* global TwitterCldr, TwitterCldrDataBundle */\n\nimport React from 'components/react';\nimport moment from 'components/moment';\nimport 'components/cldr/en';\nimport 'components/cldr/core';\n\nconst COLOURS = ['red', 'orange', 'green', 'blue', 'violet'];\n\nexport default class ReminderItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    TwitterCldr.set_data(TwitterCldrDataBundle);\n\n    this.listFormatter = new TwitterCldr.ListFormatter();\n    this.reminder = props.reminder;\n    this.onDelete = props.onDelete;\n  }\n\n  getColour(recipients = []) {\n    const name = recipients.join(' ');\n    const hash = (string) => {\n      let hash = 0, i, chr, len;\n      if (string.length === 0) {\n        return 0;\n      }\n      for (i = 0, len = string.length; i < len; i++) {\n        chr = string.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n      return hash;\n    };\n\n    return COLOURS[hash(name) % COLOURS.length];\n  }\n\n  render() {\n    const reminder = this.reminder;\n    const contentClassName = [\n      'reminders__item-content',\n      this.getColour(reminder.recipients),\n    ]\n      .join(' ');\n\n    return (\n      <li className=\"reminders__item\">\n        <div className=\"reminders__item-time\">\n          <div>{moment(reminder.datetime).format('LT')}</div>\n        </div>\n        <div className={contentClassName}>\n          <h3 className=\"reminders__item-recipient\">\n            {this.listFormatter.format(reminder.recipients)}\n          </h3>\n          <p className=\"reminders__item-text\">\n            {reminder.content}\n            <button className=\"reminders__delete\"\n                    onClick={this.onDelete}>\n              Delete\n            </button>\n          </p>\n        </div>\n      </li>\n    );\n  }\n}\n\nReminderItem.propTypes = {\n  reminder: React.PropTypes.object.isRequired,\n  onDelete: React.PropTypes.func.isRequired,\n};\n","import React from 'components/react';\nimport _ from 'components/lodash';\nimport moment from 'components/moment';\n\nimport ReminderItem from './reminders/reminder-item';\n\nexport default class Reminders extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      reminders: [],\n    };\n\n    this.speechController = props.speechController;\n    this.server = props.server;\n    this.refreshInterval = null;\n    this.debugEvent = this.debugEvent.bind(this);\n    this.onReminder = this.onReminder.bind(this);\n    this.onWebPushMessage = this.onWebPushMessage.bind(this);\n\n    moment.locale(navigator.languages || navigator.language || 'en-US');\n  }\n\n  componentDidMount() {\n    this.server.reminders.getAll()\n      .then((reminders) => {\n        reminders = reminders.map((reminder) => ({\n          id: reminder.id,\n          recipients: reminder.recipients,\n          content: reminder.action,\n          datetime: reminder.due,\n        }));\n\n        this.setState({ reminders });\n      });\n\n    // Refresh the page every 5 minutes if idle.\n    this.refreshInterval = setInterval(() => {\n      if (this.speechController.idle) {\n        location.reload(true);\n      }\n    }, 5 * 60 * 1000);\n\n    this.speechController.on('wakelistenstart', this.debugEvent);\n    this.speechController.on('wakelistenstop', this.debugEvent);\n    this.speechController.on('wakeheard', this.debugEvent);\n    this.speechController.on('speechrecognitionstart', this.debugEvent);\n    this.speechController.on('speechrecognitionstop', this.debugEvent);\n    this.speechController.on('reminder', this.debugEvent);\n    this.speechController.on('reminder', this.onReminder);\n\n    this.server.on('push-message', this.onWebPushMessage);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refreshInterval);\n\n    this.speechController.off('wakelistenstart', this.debugEvent);\n    this.speechController.off('wakelistenstop', this.debugEvent);\n    this.speechController.off('wakeheard', this.debugEvent);\n    this.speechController.off('speechrecognitionstart', this.debugEvent);\n    this.speechController.off('speechrecognitionstop', this.debugEvent);\n    this.speechController.off('reminder', this.debugEvent);\n    this.speechController.off('reminder', this.onReminder);\n\n    this.server.off('push-message', this.onWebPushMessage);\n  }\n\n  debugEvent(evt) {\n    if (evt.result !== undefined) {\n      console.log(evt.type, evt.result);\n      return;\n    }\n\n    console.log(evt.type);\n  }\n\n  onReminder(evt) {\n    const reminder = evt.result;\n\n    // @todo Nice to have: optimistic update.\n    // https://github.com/fxbox/calendar/issues/32\n    this.server.reminders\n      .set({\n        recipients: reminder.users,\n        action: reminder.action,\n        due: Number(reminder.time),\n      })\n      .then((savedReminder) => {\n        const reminders = this.state.reminders;\n\n        reminders.push({\n          id: savedReminder.id,\n          recipients: savedReminder.recipients,\n          content: savedReminder.action,\n          datetime: savedReminder.due,\n        });\n\n        this.setState({ reminders });\n\n        console.log('Voice confirmation:', reminder.confirmation);\n        this.speechController.speak(reminder.confirmation);\n      })\n      .catch((res) => {\n        // @todo Add some feedback and remove the reminder from the list:\n        // https://github.com/fxbox/calendar/issues/24\n        console.error('Saving the reminder failed.', res);\n      });\n  }\n\n  onDelete(id) {\n    // @todo Nice to have: optimistic update.\n    // https://github.com/fxbox/calendar/issues/32\n    this.server.reminders.delete(id)\n      .then(() => {\n        const reminders = this.state.reminders\n          .filter((reminder) => reminder.id !== id);\n        this.setState({ reminders });\n      })\n      .catch(() => {\n        console.error(`The reminder ${id} could not be deleted.`);\n      });\n  }\n\n  onWebPushMessage(message) {\n    const id = message.fullMessage.id;\n\n    // We don't want to delete them, merely remove it from our local state.\n    // At reload, we shouldn't get it because their status changed server-side\n    // too.\n    const reminders = this.state.reminders\n      .filter((reminder) => reminder.id !== id);\n    this.setState({ reminders });\n  }\n\n  // @todo Add a different view when there's no reminders:\n  // https://github.com/fxbox/calendar/issues/16\n  render() {\n    let reminders = this.state.reminders;\n\n    // Sort all the reminders chronologically.\n    reminders = reminders.sort((a, b) => {\n      return a.datetime - b.datetime;\n    });\n\n    // Group the reminders by month.\n    reminders = _.groupBy(reminders, (reminder) => {\n      return moment(reminder.datetime).format('YYYY/MM');\n    });\n\n    // For each month, group the reminders by day.\n    Object.keys(reminders).forEach((month) => {\n      reminders[month] = _.groupBy(reminders[month], (reminder) => {\n        return moment(reminder.datetime).format('YYYY/MM/DD');\n      });\n    });\n\n    const reminderNodes = Object.keys(reminders).map((key) => {\n      const month = moment(key, 'YYYY/MM').format('MMMM');\n      const reminderMonth = reminders[key];\n\n      return (\n        <div key={key}>\n          <h2 className=\"reminders__month\">{month}</h2>\n          {Object.keys(reminderMonth).map((key) => {\n            const date = moment(key, 'YYYY/MM/DD');\n            const remindersDay = reminderMonth[key];\n\n            return (\n              <div key={key} className=\"reminders__day\">\n                <div className=\"reminders__day-date\">\n                  <div className=\"reminders__day-mday\">\n                    {date.format('DD')}\n                  </div>\n                  <div className=\"reminders__day-wday\">\n                    {date.format('ddd')}\n                  </div>\n                </div>\n                <ol className=\"reminders__list\">\n                  {remindersDay.map((reminder) => {\n                    return (<ReminderItem\n                      key={reminder.id}\n                      reminder={reminder}\n                      onDelete={this.onDelete.bind(this, reminder.id)}\n                    />);\n                  })}\n                </ol>\n              </div>\n            );\n          })}\n        </div>\n      );\n    });\n\n    return (\n      <section className=\"reminders\">\n        {reminderNodes}\n      </section>\n    );\n  }\n}\n\nReminders.propTypes = {\n  speechController: React.PropTypes.object.isRequired,\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\n\nexport default class Microphone extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isListening: false,\n    };\n\n    this.speechController = props.speechController;\n    this.server = props.server;\n    this.bleep = new Audio();\n\n    this.bleep.src = 'media/cue.wav';\n\n    this.speechController.on('wakeheard', () => {\n      this.bleep.pause();\n      this.bleep.currentTime = 0;\n      this.bleep.play();\n      this.setState({ isListening: true });\n    });\n    this.speechController.on('speechrecognitionstop', () => {\n      this.setState({ isListening: false });\n    });\n\n    this.click = this.click.bind(this);\n  }\n\n  click() {\n    if (!this.state.isListening) {\n      this.bleep.pause();\n      this.bleep.currentTime = 0;\n      this.bleep.play();\n      this.setState({ isListening: true });\n      this.speechController.startSpeechRecognition();\n      return;\n    }\n\n    this.bleep.pause();\n    this.setState({ isListening: false });\n    this.speechController.stopSpeechRecognition();\n  }\n\n  render() {\n    if (!this.server.isLoggedIn) {\n      return null;\n    }\n\n    const className = this.state.isListening ? 'listening' : '';\n\n    return (\n      <div className={className} onClick={this.click}>\n        <div className=\"microphone__background\"></div>\n        <img className=\"microphone__icon\" src=\"css/icons/microphone.svg\"/>\n      </div>\n    );\n  }\n}\n\nMicrophone.propTypes = {\n  speechController: React.PropTypes.object.isRequired,\n  server: React.PropTypes.object.isRequired,\n};\n","import React from 'components/react';\nimport ReactDOM from 'components/react-dom';\n\nimport BaseController from './base';\n\nimport Reminders from '../views/reminders';\nimport Microphone from '../views/microphone';\n\nexport default class RemindersController extends BaseController {\n  main() {\n    ReactDOM.render(\n      React.createElement(Reminders, {\n        speechController: this.speechController,\n        server: this.server,\n      }), this.mountNode\n    );\n\n    ReactDOM.render(\n      React.createElement(Microphone, {\n        speechController: this.speechController,\n        server: this.server,\n      }), document.querySelector('.microphone')\n    );\n  }\n}\n","'use strict';\n\n/*\n * This file provides an helper to add custom events to any object.\n *\n * In order to use this functionality with any object consumer should extend\n * target object class with EventDispatcher:\n *\n * class Obj extends EventDispatcher {}\n * const obj = new Obj();\n *\n * A list of events can be optionally provided and it is recommended to do so.\n * If a list is provided then only the events present in the list will be\n * allowed. Using events not present in the list will cause other functions to\n * throw an error:\n *\n * class Obj extends EventDispatcher {\n *   constructor() {\n *     super(['somethinghappened', 'somethingelsehappened']);\n *   }\n * }\n * const obj = new Obj();\n *\n * The object will have five new methods: 'on', 'once', 'off', 'offAll' and\n * 'emit'. Use 'on' to register a new event-handler:\n *\n * obj.on(\"somethinghappened\", function onSomethingHappened() { ... });\n *\n * If the same event-handler is added multiple times then only one will be\n * registered, e.g.:\n *\n * function onSomethingHappened() { ... }\n * obj.on(\"somethinghappened\", onSomethingHappened);\n * obj.on(\"somethinghappened\", onSomethingHappened); // Does nothing\n *\n * Use 'off' to remove a registered listener:\n *\n * obj.off(\"somethinghappened\", onSomethingHappened);\n *\n * Use 'once' to register a one-time event-handler: it will be automatically\n * unregistered after being called.\n *\n * obj.once(\"somethinghappened\", function onSomethingHappened() { ... });\n *\n * And use 'offAll' to remove all registered event listeners for the specified\n * event:\n *\n * obj.offAll(\"somethinghappened\");\n *\n * When used without parameters 'offAll' removes all registered event handlers,\n * this can be useful when writing unit-tests.\n *\n * Finally use 'emit' to send an event to the registered handlers:\n *\n * obj.emit(\"somethinghappened\");\n *\n * An optional parameter can be passed to 'emit' to be passed to the registered\n * handlers:\n *\n * obj.emit(\"somethinghappened\", 123);\n */\n\nconst assertValidEventName = function(eventName) {\n  if (!eventName || typeof eventName !== 'string') {\n    throw new Error('Event name should be a valid non-empty string!');\n  }\n};\n\nconst assertValidHandler = function(handler) {\n  if (typeof handler !== 'function') {\n    throw new Error('Handler should be a function!');\n  }\n};\n\nconst assertAllowedEventName = function(allowedEvents, eventName) {\n  if (allowedEvents && allowedEvents.indexOf(eventName) < 0) {\n    throw new Error(`Event \"${eventName}\" is not allowed!`);\n  }\n};\n\nconst p = Object.freeze({\n  allowedEvents: Symbol('allowedEvents'),\n  listeners: Symbol('listeners'),\n});\n\nexport default class EventDispatcher {\n  constructor(allowedEvents) {\n    if (typeof allowedEvents !== 'undefined' && !Array.isArray(allowedEvents)) {\n      throw new Error('Allowed events should be a valid array of strings!');\n    }\n\n    this[p.listeners] = new Map();\n    this[p.allowedEvents] = allowedEvents;\n  }\n\n  /**\n   * Registers listener function to be executed once event occurs.\n   *\n   * @param {string} eventName Name of the event to listen for.\n   * @param {function} handler Handler to be executed once event occurs.\n   */\n  on(eventName, handler) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n    assertValidHandler(handler);\n\n    let handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      handlers = new Set();\n      this[p.listeners].set(eventName, handlers);\n    }\n\n    // Set.add ignores handler if it has been already registered.\n    handlers.add(handler);\n  }\n\n  /**\n   * Registers listener function to be executed only first time when event\n   * occurs.\n   *\n   * @param {string} eventName Name of the event to listen for.\n   * @param {function} handler Handler to be executed once event occurs.\n   */\n  once(eventName, handler) {\n    assertValidHandler(handler);\n\n    const once = (parameters) => {\n      this.off(eventName, once);\n\n      handler.call(this, parameters);\n    };\n\n    this.on(eventName, once);\n  }\n\n  /**\n   * Removes registered listener for the specified event.\n   *\n   * @param {string} eventName Name of the event to remove listener for.\n   * @param {function} handler Handler to remove, so it won't be executed\n   * next time event occurs.\n   */\n  off(eventName, handler) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n    assertValidHandler(handler);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.delete(handler);\n\n    if (!handlers.size) {\n      this[p.listeners].delete(eventName);\n    }\n  }\n\n  /**\n   * Removes all registered listeners for the specified event.\n   *\n   * @param {string=} eventName Name of the event to remove all listeners for.\n   */\n  offAll(eventName) {\n    if (typeof eventName === 'undefined') {\n      this[p.listeners].clear();\n      return;\n    }\n\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.clear();\n\n    this[p.listeners].delete(eventName);\n  }\n\n  /**\n   * Emits specified event so that all registered handlers will be called\n   * with the specified parameters.\n   *\n   * @param {string} eventName Name of the event to call handlers for.\n   * @param {Object=} parameters Optional parameters that will be passed to\n   * every registered handler.\n   */\n  emit(eventName, parameters) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    const handlers = this[p.listeners].get(eventName);\n    if (!handlers) {\n      return;\n    }\n\n    handlers.forEach((handler) => {\n      try {\n        handler.call(this, parameters);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  /**\n   * Checks if there are any listeners that listen for the specified event.\n   *\n   * @param {string} eventName Name of the event to check listeners for.\n   * @returns {boolean}\n   */\n  hasListeners(eventName) {\n    assertValidEventName(eventName);\n    assertAllowedEventName(this[p.allowedEvents], eventName);\n\n    return this[p.listeners].has(eventName);\n  }\n}\n","'use strict';\n\nimport JsSpeechRecognizer from 'components/jsspeechrecognizer';\n\nexport default class WakeWordRecogniser {\n  constructor(options = {}) {\n    const minimumConfidence = options.minimumConfidence || 0.35;\n    const bufferCount = options.bufferCount || 80;\n    const maxVoiceActivityGap = options.maxVoiceActivityGap || 300;\n    const numGroups = options.numGroups || 60;\n    const groupSize = options.groupSize || 5;\n\n    this.recogniser = new JsSpeechRecognizer();\n\n    this.recogniser.keywordSpottingMinimumConfidence = minimumConfidence;\n    this.recogniser.keywordSpottingBufferCount = bufferCount;\n    this.recogniser.keywordSpottingMaxVoiceActivityGap = maxVoiceActivityGap;\n    this.recogniser.numGroups = numGroups;\n    this.recogniser.groupSize = groupSize;\n\n    Object.seal(this);\n  }\n\n  startListening() {\n    return new Promise((resolve) => {\n      this.recogniser.closeMic(); // Make sure we don't start another instance\n      this.recogniser.openMic();\n      if (!this.recogniser.isRecording()) {\n        this.recogniser.startKeywordSpottingRecording();\n      }\n\n      resolve();\n    });\n  }\n\n  stopListening() {\n    return new Promise((resolve) => {\n      if (this.recogniser.isRecording()) {\n        this.recogniser.stopRecording();\n      }\n\n      this.recogniser.closeMic();\n\n      resolve();\n    });\n  }\n\n  loadModel(modelData) {\n    if (this.recogniser.isRecording()) {\n      throw new Error(\n        'Load the model data before listening for wakeword');\n    }\n\n    this.recogniser.model = modelData;\n  }\n\n  setOnKeywordSpottedCallback(fn) {\n    this.recogniser.keywordSpottedCallback = fn;\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  isListening: Symbol('isListening'),\n  recognition: Symbol('recognition'),\n  supportsRecognition: Symbol('supportsRecognition'),\n});\n\nexport default class SpeechRecogniser {\n  constructor() {\n    this[p.isListening] = false;\n\n    const Recognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n\n    const supportsRecognition = !!Recognition;\n\n    this[p.supportsRecognition] = supportsRecognition;\n\n    if (supportsRecognition) {\n      this[p.recognition] = new Recognition();\n      // Continuous mode prevents Android from being stuck for 5 seconds between\n      // the last word said and the results to come in.\n      this[p.recognition].continuous = true;\n    } else {\n      this[p.recognition] = null;\n    }\n\n    Object.seal(this);\n  }\n\n  listenForUtterance() {\n    if (!this[p.supportsRecognition]) {\n      return Promise.reject(\n        new Error('Speech recognition not supported in this browser'));\n    }\n\n    if (this[p.isListening]) {\n      return Promise.reject(\n        new Error('Speech recognition is already listening'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this[p.isListening] = true;\n\n      // Not using `addEventListener` here to avoid\n      // `removeEventListener` everytime it's simpler\n      // to just redefine `onresult` to the same effect.\n      this[p.recognition].onresult = (event) => {\n        // Due to continuous mode, many results may arrive. We choose to only\n        // return the first result and to forget about the following ones.\n        if (this[p.isListening]) {\n          this[p.recognition].stop();\n          this[p.isListening] = false;\n\n          // Always take first result\n          const result = event.results[0][0];\n\n          return resolve({\n            confidence: result.confidence,\n            utterance: result.transcript,\n          });\n        }\n      };\n\n      this[p.recognition].onerror = (error) => {\n        this[p.recognition].stop();\n        this[p.isListening] = false;\n        return reject(error);\n      };\n\n      this[p.recognition].start();\n    });\n  }\n\n  abort() {\n    // @xxx abort() should be used, but throws an error that puts the app in an\n    // unusable state. In more details, when we used it, we kept getting a\n    // SpeechRecognitionError with the code \"network\" (and no extra information)\n    // Our investigation showed that network or the server side is not to blame\n    // but it's a border effect of using webkitSpeechRecognition and\n    // JsSpeechRecognizer at the same time.\n    // Using stop() sends data to STT servers but we will get errors like\n    // SpeechRecognitionError (code \"no-speech\") or if something was heard, the\n    // pattern won't be matched.\n    this[p.recognition].stop();\n    this[p.isListening] = false;\n\n    return Promise.resolve();\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  // Properties\n  synthesis: Symbol('synthesis'),\n  supportsSynthesis: Symbol('supportsSynthesis'),\n  preferredVoice: Symbol('preferredVoice'),\n  initialised: Symbol('initialised'),\n\n  // Methods\n  setPreferredVoice: Symbol('setPreferredVoice'),\n});\n\nconst VOICE_PITCH = 0.8;\nconst VOICE_RATE = 0.9;\n\nexport default class SpeechSynthesis {\n  constructor() {\n    const synthesis = window.speechSynthesis;\n\n    this[p.initialised] = false;\n    this[p.supportsSynthesis] = !!synthesis;\n    this[p.preferredVoice] = null;\n\n    if (this[p.supportsSynthesis]) {\n      this[p.synthesis] = synthesis;\n      this[p.setPreferredVoice]();\n      this[p.synthesis].onvoiceschanged = this[p.setPreferredVoice].bind(this);\n    } else {\n      this[p.synthesis] = null;\n    }\n\n    Object.seal(this);\n  }\n\n  /**\n   * Speak a text aloud.\n   *\n   * @param {string} text\n   */\n  speak(text = '') {\n    if (!text) {\n      return;\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    if (this[p.preferredVoice]) {\n      // Use a preferred voice if available.\n      utterance.voice = this[p.preferredVoice];\n    }\n    utterance.lang = 'en';\n    utterance.pitch = VOICE_PITCH;\n    utterance.rate = VOICE_RATE;\n\n    this[p.synthesis].speak(utterance);\n  }\n\n  /**\n   * From all the voices available, set the default language to English with a\n   * female voice if available.\n   */\n  [p.setPreferredVoice]() {\n    if (this[p.initialised]) {\n      return;\n    }\n\n    const voices = this[p.synthesis].getVoices();\n\n    if (!voices.length) {\n      return;\n    }\n\n    const englishVoices = voices\n      .filter((voice) => voice.lang === 'en' || voice.lang.startsWith('en-'));\n\n    const femaleVoices = englishVoices\n      .filter((voice) => voice.name.includes('Female'));\n\n    if (femaleVoices.length) {\n      this[p.preferredVoice] = femaleVoices[0];\n    } else if (englishVoices.length) {\n      this[p.preferredVoice] = englishVoices[0];\n    }\n\n    this[p.initialised] = true;\n    this[p.synthesis].onvoiceschanged = null;\n  }\n}\n","/* global TwitterCldr, TwitterCldrDataBundle */\n\n'use strict';\n\nimport moment from 'components/moment';\nimport 'components/cldr/en';\nimport 'components/cldr/core';\n\n/*\n * @todo:\n *   * @see http://www.unicode.org/cldr/charts/29/verify/dates/en.html\n *     for formatting the time of the day.\n */\n\nconst p = Object.freeze({\n  // Properties\n  listFormatter: Symbol('listFormatter'),\n\n  // Methods\n  getLocalised: Symbol('getLocalised'),\n  formatUser: Symbol('formatUser'),\n  formatAction: Symbol('formatAction'),\n  formatTime: Symbol('formatTime'),\n  isToday: Symbol('isToday'),\n  isTomorrow: Symbol('isTomorrow'),\n  isThisMonth: Symbol('isThisMonth'),\n  formatHoursAndMinutes: Symbol('formatHoursAndMinutes'),\n});\n\nconst DEFAULT_LOCALE = 'en';\nconst PATTERNS = {\n  en: {\n    template: `OK, I'll remind [users] [action] [time].`,\n    formatUser: (user) => user\n      .replace(/\\bme\\b/gi, 'you')\n      .replace(/\\bI\\b/gi, 'you')\n      .replace(/\\bmy\\b/gi, 'your')\n      .replace(/\\bmine\\b/gi, 'yours'),\n  },\n  fr: {\n    template: `OK, je rappelerai [users] [action] [time].`,\n    formatUser: (user) => user,\n  },\n  ja: {\n    template: `承知しました。[time][users]に[action]をリマインドします。`,\n    formatUser: (user) => user,\n  },\n};\n\nexport default class Confirmation {\n  constructor(locale = DEFAULT_LOCALE) {\n    this.locale = locale;\n\n    TwitterCldr.set_data(TwitterCldrDataBundle);\n\n    this[p.listFormatter] = new TwitterCldr.ListFormatter();\n  }\n\n  /**\n   * Generate a phrase to be spoken to confirm a reminder.\n   *\n   * @param {Object} reminder\n   * @return {string}\n   */\n  getReminderMessage(reminder) {\n    console.log(reminder);\n\n    const template = this[p.getLocalised]('template');\n    const data = {\n      users: this[p.formatUser](reminder),\n      action: this[p.formatAction](reminder),\n      time: this[p.formatTime](reminder),\n    };\n\n    return template.replace(/\\[([^\\]]+)\\]/g, (match, placeholder) => {\n      return data[placeholder];\n    });\n  }\n\n  /**\n   * Given a property of the PATTERNS object, returns the one matching the\n   * current locale or the default one if non existing.\n   *\n   * @param {string} prop\n   * @returns {*}\n   */\n  [p.getLocalised](prop) {\n    let locale = this.locale;\n    if (!PATTERNS[this.locale] || !PATTERNS[this.locale][prop]) {\n      locale = DEFAULT_LOCALE;\n    }\n\n    return PATTERNS[locale][prop];\n  }\n\n  [p.formatUser](reminder) {\n    const formatUser = this[p.getLocalised]('formatUser');\n    const users = reminder.users.map(formatUser);\n    return this[p.listFormatter].format(users);\n  }\n\n  [p.formatAction](reminder) {\n    const formatUser = this[p.getLocalised]('formatUser');\n    const action = formatUser(reminder.action);\n    const PATTERN1 = new RegExp(`\\\\bthat \\\\[action\\\\]`, 'iu');\n    const PATTERN2 = new RegExp(`\\\\bit is \\\\[action\\\\]`, 'iu');\n\n    if (PATTERN1.test(reminder.match)) {\n      return `that ${action}`;\n    } else if (PATTERN2.test(reminder.match)) {\n      return `that it is ${action}`;\n    }\n\n    return `to ${action}`;\n  }\n\n  [p.formatTime](reminder) {\n    const date = reminder.time;\n    let time = '';\n\n    if (this[p.isToday](date)) {\n      const hour = this[p.formatHoursAndMinutes](date);\n      time = `at ${hour} today`;\n    } else if (this[p.isTomorrow](date)) {\n      const hour = this[p.formatHoursAndMinutes](date);\n      time = `at ${hour} tomorrow`;\n    } else if (this[p.isThisMonth](date)) {\n      time = moment(date).format('[on the] Do');\n    } else {\n      time = moment(date).format('[on] MMMM [the] Do');\n    }\n\n    return time;\n  }\n\n  [p.isToday](date) {\n    const today = moment().startOf('day');\n    const tomorrow = moment().add(1, 'day').startOf('day');\n    return moment(date).isBetween(today, tomorrow);\n  }\n\n  [p.isTomorrow](date) {\n    const tomorrow = moment().add(1, 'day').startOf('day');\n    const in2days = moment().add(2, 'day').startOf('day');\n    return moment(date).isBetween(tomorrow, in2days);\n  }\n\n  [p.isThisMonth](date) {\n    const thisMonth = moment().startOf('month');\n    const nextMonth = moment().add(1, 'month').startOf('month');\n    return moment(date).isBetween(thisMonth, nextMonth);\n  }\n\n  /**\n   * Return a string from a date suitable for speech synthesis.\n   *\n   * @param {Date} date\n   * @return {string}\n   */\n  [p.formatHoursAndMinutes](date) {\n    date = moment(date);\n    if (date.minute() === 0) {\n      return date.format('h A'); // 7 PM\n    } else if (date.minute() === 15) {\n      return date.format('[quarter past] h A');\n    } else if (date.minute() === 30) {\n      return date.format('[half past] h A');\n    } else if (date.minute() === 45) {\n      const nextHour = date.add(1, 'hour');\n      return nextHour.format('[quarter to] h A');\n    }\n    return date.format('h m A'); // 6 24 AM\n  }\n}\n","'use strict';\n\nimport Confirmation from './intent-parser/confirmation';\nimport chrono from 'components/chrono';\n\n/*\nExamples of supported phrases:\nRemind me to pick Sasha from Santa Clara University at 5PM today.\nRemind me that it is picnic day on July 4th.\nRemind us to go to the opera at 7:15pm on 2nd February.\nRemind us to go at my mum's at 11:30am on 31st July.\nRemind everybody to pack their stuff by next Friday 5pm.\nRemind me that every Tuesday night is trash day.\n\nTo add:\nRemind me every Tuesday to take the bin out.\nRemind Guillaume on Thursdays evening to go to his drawing class.\nRemind me that I should prepare my appointment tomorrow morning.\n*/\n\n/*\n * @todo:\n *   * Replace `[users]` patterns by `[users]`.\n *   * Use CLDR to:\n *     * Generate placeholders.users\n *     * Generate placeholders.listBreaker\n *     * Generate placeholders.punctuation\n *   * @see http://www.unicode.org/cldr/charts/29/verify/dates/en.html\n *     to parse time (e.g. '... in the morning' => 9:00 AM)\n *   * Make date parsing more robust by applying `chrono` to the full phrase.\n */\n\nconst p = Object.freeze({\n  // Properties\n  confirmation: Symbol('confirmation'),\n  patterns: Symbol('patterns'),\n\n  // Methods\n  parseUsers: Symbol('parseUsers'),\n  parseAction: Symbol('parseAction'),\n  parseDatetime: Symbol('parseDatetime'),\n  normalise: Symbol('normalise'),\n  init: Symbol('init'),\n  buildPatterns: Symbol('buildPatterns'),\n  splitOnPlaceholders: Symbol('splitOnPlaceholders'),\n  escape: Symbol('escape'),\n});\n\nconst PATTERNS = {\n  en: {\n    patterns: [\n      `Remind [users] to [action] at [time].`,\n      `Remind [users] to [action] on [time].`,\n      `Remind [users] to [action] by [time].`,\n      `Remind [users] at [time] to [action].`,\n      `Remind [users] on [time] to [action].`,\n      `Remind [users] by [time] to [action].`,\n      `Remind [users] that it is [action] on [time].`,\n      `Remind [users] that it is [action] at [time].`,\n      `Remind [users] that it is [action] by [time].`,\n      `Remind [users] that [time] is [action].`,\n      `Remind [users] that [action] at [time].`,\n      `Remind [users] that [action] on [time].`,\n      `Remind [users] that [action] by [time].`,\n    ],\n    placeholders: {\n      users: '( \\\\S+ | \\\\S+,? and \\\\S+ )',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    // @see http://www.unicode.org/cldr/charts/29/summary/en.html#4\n    punctuation: new RegExp(\n      `[-‐–—,;:!?.…'‘’\"“”()\\\\[\\\\]§@*/&#†‡′″]+$`, 'u'),\n    // @see http://www.unicode.org/cldr/charts/29/summary/en.html#6402\n    listBreaker: new RegExp(`,|, and\\\\b|\\\\band\\\\b`, 'gu'),\n  },\n  fr: {\n    patterns: [\n      `Rappelle [users] de [action] [time].`,\n      `Rappelle [users] d'[action] [time].`,\n      `Rappelle-[users] de [action] [time].`,\n      `Rappelle-[users] d'[action] [time].`,\n    ],\n    placeholders: {\n      users: '( \\\\S+ | \\\\S+ et \\\\S+ )',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    punctuation: new RegExp(\n      `[-‐–—,;:!?.…’\"“”«»()\\\\[\\\\]§@*/&#†‡]+$`, 'u'),\n    listBreaker: new RegExp(`,|\\\\bet\\\\b`, 'gu'),\n  },\n  ja: {\n    patterns: [\n      `[time][action]を[users]に思い出させて。`,\n      `[time][users]に[action]を思い出させて。`,\n      `[time][users]は[action]と言うリマインダーを作成して。`,\n    ],\n    placeholders: {\n      users: '(\\\\S+|\\\\S+、\\\\S+)',\n      action: '(.+)',\n      time: '(.+)',\n    },\n    punctuation: new RegExp(\n      `[-‾_＿－‐—―〜・･,，、､;；:：!！?？.．‥…。｡＇‘’\"＂“”(（)）\\\\[［\\\\]］{｛}｝` +\n      `〈〉《》「｢」｣『』【】〔〕‖§¶@＠*＊/／\\＼&＆#＃%％‰†‡′″〃※]+$`, 'u'),\n    listBreaker: new RegExp(`、`, 'gu'),\n  },\n};\n\nexport default class IntentParser {\n  constructor(locale = 'en') {\n    this.locale = locale;\n    this[p.confirmation] = new Confirmation(locale);\n    this[p.patterns] = {};\n\n    this[p.init]();\n\n    window.intentParser = this;\n\n    Object.seal(this);\n  }\n\n  parse(phrase = '') {\n    if (!phrase) {\n      return Promise.reject('Empty string.');\n    }\n\n    return new Promise((resolve, reject) => {\n      const successful = this[p.patterns][this.locale].some((pattern) => {\n        if (!pattern.regexp.test(phrase)) {\n          return false;\n        }\n\n        const segments = pattern.regexp.exec(phrase);\n        segments.shift();\n\n        const users = this[p.parseUsers](segments[pattern.placeholders.users]);\n        const action =\n          this[p.parseAction](segments[pattern.placeholders.action]);\n        const time = this[p.parseDatetime](segments[pattern.placeholders.time]);\n\n        if (time === null) {\n          reject('Time could not be parsed.');\n          return false; // Try next patterns.\n        }\n\n        // The original pattern matching the intent.\n        const match = pattern.match;\n\n        const confirmation = this[p.confirmation].getReminderMessage({\n          users,\n          action,\n          time,\n          match,\n        });\n\n        resolve({ users, action, time, confirmation });\n        return true;\n      });\n\n      if (!successful) {\n        return reject('Unsupported intent format.');\n      }\n    });\n  }\n\n  [p.parseUsers](string = '') {\n    return string\n      .split(PATTERNS[this.locale].listBreaker)\n      .map((user) => user.trim());\n  }\n\n  [p.parseAction](string = '') {\n    return string.trim();\n  }\n\n  [p.parseDatetime](string = '') {\n    string = string.trim();\n    const datetime = chrono.parseDate(string);\n\n    return datetime;\n  }\n\n  [p.normalise](string = '', locale = this.locale) {\n    // Normalise whitespaces to space.\n    return string\n      .replace(/\\s+/g, ' ')\n      .trim()\n      // Strip punctuations.\n      .replace(PATTERNS[locale].punctuation, '');\n  }\n\n  /**\n   * Build the `patterns` property as an object mapping locale code to list of\n   * patterns.\n   */\n  [p.init]() {\n    Object.keys(PATTERNS).forEach((locale) => {\n      this[p.patterns][locale] = PATTERNS[locale].patterns.map((phrase) =>\n        this[p.buildPatterns](locale, phrase, PATTERNS[locale].placeholders));\n    });\n  }\n\n  [p.buildPatterns](locale = this.locale, match = '', placeholders) {\n    const phrase = this[p.normalise](match, locale);\n    const tokens = this[p.splitOnPlaceholders](phrase);\n    const order = {};\n    let placeholderIndex = 0;\n\n    const pattern = tokens\n      .map((token) => {\n        if (token.startsWith('[')) {\n          const placeholder = token\n            .substr(1)\n            // Strip trailing `]` if any.\n            .replace(new RegExp('\\\\]$', 'u'), '');\n\n          // The order of the placeholders can be different depending on the\n          // pattern or language. When we parse a string, we need to match the\n          // regexp captured masks to the placeholder given its position.\n          order[placeholder] = placeholderIndex;\n          placeholderIndex++;\n\n          return placeholders[placeholder];\n        }\n\n        if (token === ' ') {\n          return '\\\\b \\\\b';\n        }\n\n        // Leading and trailing spaces are changed to word boundary.\n        return this[p.escape](token)\n          .replace(new RegExp('^ ', 'u'), '\\\\b')\n          .replace(new RegExp(' $', 'u'), '\\\\b');\n      });\n\n    const regexp = new RegExp(`^${pattern.join('')}$`, 'iu');\n\n    return { regexp, placeholders: order, match };\n  }\n\n  /**\n   * Split the input phrase along the placeholders noted into brackets:\n   * `Meet [users] on [time].` => ['Meet ', '[users]', ' on ', '[time]', '.']\n   *\n   * @param {string} phrase\n   * @return {Array.<string>}\n   */\n  [p.splitOnPlaceholders](phrase) {\n    const tokens = [''];\n    let index = 0;\n\n    phrase.split('').forEach((c) => {\n      if (c === '[' && tokens[index] !== '') {\n        index++;\n        tokens[index] = '';\n      }\n\n      tokens[index] += c;\n\n      if (c === ']') {\n        index++;\n        tokens[index] = '';\n      }\n    });\n\n    return tokens;\n  }\n\n  /**\n   * Escape characters to be used inside a RegExp as static patterns.\n   *\n   * @param {string} string\n   * @return {string}\n   */\n  [p.escape](string) {\n    return string\n      .replace(new RegExp('\\\\.', 'gu'), '\\\\.')\n      .replace(new RegExp('\\\\/', 'gu'), '\\\\/')\n      .replace(new RegExp('\\\\(', 'gu'), '\\\\(')\n      .replace(new RegExp('\\\\)', 'gu'), '\\\\)');\n  }\n}\n","'use strict';\n\nimport EventDispatcher from './common/event-dispatcher';\nimport WakeWordRecogniser from './wakeword/recogniser';\nimport SpeechRecogniser from './speech/recogniser';\nimport SpeechSynthesis from './speech/synthesis';\nimport IntentParser from './intent-parser';\n\nconst p = Object.freeze({\n  // Properties\n  wakewordRecogniser: Symbol('wakewordRecogniser'),\n  wakewordModelUrl: Symbol('wakewordModelUrl'),\n  speechRecogniser: Symbol('speechRecogniser'),\n  speechSynthesis: Symbol('speechSynthesis'),\n  idle: Symbol('idle'),\n\n  // Methods\n  initialiseSpeechRecognition: Symbol('initialiseSpeechRecognition'),\n  startListeningForWakeword: Symbol('startListeningForWakeword'),\n  stopListeningForWakeword: Symbol('stopListeningForWakeword'),\n  listenForUtterance: Symbol('listenForUtterance'),\n  handleSpeechRecognitionEnd: Symbol('handleSpeechRecognitionEnd'),\n  intentParser: Symbol('intentParser'),\n});\n\nconst EVENT_INTERFACE = [\n  // Emit when the wakeword is being listened for\n  'wakelistenstart',\n\n  // Emit when the wakeword is no longer being listened for\n  'wakelistenstop',\n\n  // Emit when the wakeword is heard\n  'wakeheard',\n\n  // Emit when the speech recognition engine starts listening\n  // (And _could_ be sending speech over the network)\n  'speechrecognitionstart',\n\n  // Emit when the speech recognition engine returns a recognised phrase\n  'speechrecognitionstop',\n\n  // Emit when an intent is successfully parsed and we have a reminder object.\n  'reminder',\n];\n\nexport default class SpeechController extends EventDispatcher {\n  constructor() {\n    super(EVENT_INTERFACE);\n\n    this[p.idle] = true;\n    this[p.wakewordModelUrl] = 'data/wakeword_model.json';\n\n    this[p.speechRecogniser] = new SpeechRecogniser();\n    this[p.speechSynthesis] = new SpeechSynthesis();\n    this[p.wakewordRecogniser] = new WakeWordRecogniser();\n    this[p.intentParser] = new IntentParser();\n\n    this[p.wakewordRecogniser].setOnKeywordSpottedCallback(() => {\n      this.emit(EVENT_INTERFACE[2], { type: EVENT_INTERFACE[2] });\n\n      this.startSpeechRecognition();\n    });\n\n    Object.seal(this);\n  }\n\n  get idle() {\n    return this[p.idle];\n  }\n\n  start() {\n    return this[p.initialiseSpeechRecognition]()\n      .then(this[p.startListeningForWakeword].bind(this));\n  }\n\n  startSpeechRecognition() {\n    this[p.idle] = false;\n\n    return this[p.stopListeningForWakeword]()\n      .then(this[p.listenForUtterance].bind(this))\n      .then(this[p.handleSpeechRecognitionEnd].bind(this))\n      .then(this[p.startListeningForWakeword].bind(this))\n      .catch((err) => {\n        console.log('startSpeechRecognition err', err);\n        this.emit(EVENT_INTERFACE[4], { type: EVENT_INTERFACE[4] });\n        this[p.startListeningForWakeword]();\n      });\n  }\n\n  stopSpeechRecognition() {\n    return this[p.speechRecogniser].abort()\n      .then(this[p.startListeningForWakeword].bind(this));\n  }\n\n  /**\n   * Speak a text aloud.\n   *\n   * @param {string} text\n   */\n  speak(text = '') {\n    this[p.speechSynthesis].speak(text);\n  }\n\n  [p.initialiseSpeechRecognition]() {\n    return fetch(this[p.wakewordModelUrl])\n      .then((response) => response.json())\n      .then((model) => {\n        this[p.wakewordRecogniser].loadModel(model);\n      });\n  }\n\n  [p.startListeningForWakeword]() {\n    this.emit(EVENT_INTERFACE[0], { type: EVENT_INTERFACE[0] });\n    this[p.idle] = true;\n\n    return this[p.wakewordRecogniser].startListening();\n  }\n\n  [p.stopListeningForWakeword]() {\n    this.emit(EVENT_INTERFACE[1], { type: EVENT_INTERFACE[1] });\n    return this[p.wakewordRecogniser].stopListening();\n  }\n\n  [p.listenForUtterance]() {\n    this.emit(EVENT_INTERFACE[3], { type: EVENT_INTERFACE[3] });\n    return this[p.speechRecogniser].listenForUtterance();\n  }\n\n  [p.handleSpeechRecognitionEnd](result) {\n    this.emit(EVENT_INTERFACE[4], { type: EVENT_INTERFACE[4], result });\n\n    // Parse intent\n    this[p.intentParser].parse(result.utterance)\n      .then((reminder) => {\n        this.emit(EVENT_INTERFACE[5], {\n          type: EVENT_INTERFACE[5],\n          result: reminder,\n        });\n      })\n      .catch((err) => {\n        console.error('Error while parsing the sentence:', err);\n        console.error('Sentence was:', result.utterance);\n      });\n  }\n}\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\n// Prefix all entries to avoid collisions.\nconst PREFIX = 'cue-';\n\nconst ORIGIN = 'https://calendar.knilxof.org';\n\n/**\n * API version to use (currently not configurable).\n * @type {number}\n * @const\n */\nconst API_VERSION = 1;\n\n/**\n * Regex to match upper case literals.\n * @type {RegExp}\n * @const\n */\nconst UPPER_CASE_REGEX = /([A-Z])/g;\n\nconst p = Object.freeze({\n  values: Symbol('values'),\n  storage: Symbol('storage'),\n\n  // Private methods.\n  updateSetting: Symbol('updateSetting'),\n  stringToSettingTypedValue: Symbol('stringToSettingTypedValue'),\n  getDefaultSettingValue: Symbol('getDefaultSettingValue'),\n  onStorage: Symbol('onStorage'),\n});\n\n// Definition of all available settings and their default values (if needed).\nconst settings = Object.freeze({\n  // String settings.\n  SESSION: Object.freeze({ key: 'session' }),\n});\n\nexport default class Settings extends EventDispatcher {\n  constructor(storage = localStorage) {\n    super();\n\n    // Not all browsers have localStorage supported or activated.\n    this[p.storage] = storage || {\n      getItem: () => null,\n      setItem: () => {},\n      removeItem: () => {},\n      clear: () => {},\n    };\n\n    this[p.values] = new Map();\n\n    Object.keys(settings).forEach((settingName) => {\n      const setting = settings[settingName];\n      const settingStringValue = this[p.storage].getItem(\n        `${PREFIX}${setting.key}`\n      );\n\n      // Setting values directly to avoid firing events on startup.\n      this[p.values].set(\n        setting,\n        this[p.stringToSettingTypedValue](setting, settingStringValue)\n      );\n    });\n\n    window.addEventListener('storage', this[p.onStorage].bind(this));\n\n    Object.seal(this);\n  }\n\n  get session() {\n    return this[p.values].get(settings.SESSION);\n  }\n\n  set session(value) {\n    this[p.updateSetting](settings.SESSION, value);\n  }\n\n  // Getters only.\n  get origin() {\n    return ORIGIN;\n  }\n\n  get apiVersion() {\n    return API_VERSION;\n  }\n\n  /**\n   * Iterates through all known settings and sets default value for all of them.\n   *\n   * @return {Promise}\n   */\n  clear() {\n    return new Promise((resolve) => {\n      Object.keys(settings).forEach((settingName) => {\n        const setting = settings[settingName];\n        this[p.updateSetting](setting, this[p.getDefaultSettingValue](setting));\n      });\n      resolve();\n    });\n  }\n\n  /**\n   * Tries to update setting with new value. If value has changed corresponding\n   * event will be emitted. New value is also persisted to the local storage.\n   *\n   * @param {Object} setting Setting description object.\n   * @param {number|boolean|string?} newValue New value for specified setting.\n   * @private\n   */\n  [p.updateSetting](setting, newValue) {\n    const currentValue = this[p.values].get(setting);\n    if (currentValue === newValue) {\n      return;\n    }\n\n    this[p.values].set(setting, newValue);\n\n    if (newValue !== this[p.getDefaultSettingValue](setting)) {\n      this[p.storage].setItem(`${PREFIX}${setting.key}`, newValue);\n    } else {\n      this[p.storage].removeItem(`${PREFIX}${setting.key}`);\n    }\n\n    this.emit(\n      setting.key.replace(UPPER_CASE_REGEX, (part) => `-${part.toLowerCase()}`),\n      newValue\n    );\n  }\n\n  /**\n   * Converts setting raw string value to the typed one depending on the setting\n   * type.\n   *\n   * @param {Object} setting Setting description object.\n   * @param {string?} stringValue Raw string setting value or null.\n   * @return {number|boolean|string|null}\n   * @private\n   */\n  [p.stringToSettingTypedValue](setting, stringValue) {\n    // If string is null, we should return default value for this setting or\n    // default value for setting type.\n    if (stringValue === null) {\n      return this[p.getDefaultSettingValue](setting);\n    } else if (setting.type === 'boolean') {\n      return stringValue === 'true';\n    } else if (setting.type === 'number') {\n      return Number(stringValue);\n    }\n\n    return stringValue;\n  }\n\n  /**\n   * Gets default typed value for the specified setting.\n   *\n   * @param {Object} setting Setting description object.\n   * @return {number|boolean|string|null}\n   * @private\n   */\n  [p.getDefaultSettingValue](setting) {\n    if (setting.defaultValue !== undefined) {\n      return setting.defaultValue;\n    }\n\n    // Default value for this setting is not specified, let's return default\n    // value for setting type (boolean, number or string).\n    if (setting.type === 'boolean') {\n      return false;\n    } else if (setting.type === 'number') {\n      return 0;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles localStorage \"storage\" event.\n   *\n   * @param {StorageEvent} evt StorageEvent instance.\n   * @private\n   */\n  [p.onStorage](evt) {\n    if (!evt.key.startsWith(PREFIX)) {\n      return;\n    }\n\n    const key = evt.key.substring(PREFIX.length);\n    const settingName = Object.keys(settings).find((settingName) => {\n      return settings[settingName].key === key;\n    });\n\n    if (!settingName) {\n      console.warn(\n        `Changed unknown storage entry with app specific prefix: ${evt.key}`\n      );\n      return;\n    }\n\n    const setting = settings[settingName];\n\n    this[p.updateSetting](\n      setting,\n      this[p.stringToSettingTypedValue](setting, evt.newValue)\n    );\n  }\n}\n","export function HttpError(statusCode) {\n  this.message = `The response returned a ${statusCode} HTTP status code.`;\n  this.statusCode = statusCode;\n  this.name = 'HttpError';\n  Error.call(this);\n}\n\nHttpError.prototype = Object.create(Error.prototype);\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\nimport { HttpError } from '../common/errors';\n\nconst p = Object.freeze({\n  // Private properties.\n  settings: Symbol('settings'),\n  online: Symbol('online'),\n\n  // Private methods.\n  init: Symbol('init'),\n  fetch: Symbol('fetch'),\n});\n\nexport default class Network extends EventDispatcher {\n  constructor(settings) {\n    super(['online']);\n\n    this[p.settings] = settings;\n    this[p.online] = false;\n\n    Object.seal(this);\n\n    this[p.init]();\n  }\n\n  /**\n   * Attach event listeners related to the connection status.\n   */\n  [p.init]() {\n    this[p.online] = navigator.onLine;\n\n    window.addEventListener('online', (online) => {\n      this[p.online] = online;\n      this.emit('online', online);\n    });\n    window.addEventListener('offline', (online) => {\n      this[p.online] = online;\n      this.emit('online', online);\n    });\n\n    if ('connection' in navigator && 'onchange' in navigator.connection) {\n      navigator.connection.addEventListener('change', () => {\n        const online = navigator.onLine;\n\n        this[p.online] = online;\n        this.emit('online', online);\n      });\n    }\n  }\n\n  get origin() {\n    return this[p.settings].origin;\n  }\n\n  get online() {\n    return this[p.online];\n  }\n\n  /**\n   * Request a JSON from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} method The HTTP method (defaults to \"GET\").\n   * @param {Object} body An object of key/value.\n   * @return {Promise}\n   */\n  fetchJSON(url, method = 'GET', body = undefined) {\n    const accept = 'application/json';\n    return this[p.fetch](url, accept, method, body)\n      .then((response) => {\n        const contentType = response.headers.get('Content-Type') || '';\n        if (response.ok && !contentType.startsWith(accept)) {\n          return;\n        }\n\n        return response.json();\n      });\n  }\n\n  /**\n   * Request a Blob from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} blobType The Blob mime type (eg. image/jpeg).\n   * @param {string=} method The HTTP method (defaults to \"GET\").\n   * @param {Object=} body An object of key/value.\n   * @return {Promise<Blob>}\n   */\n  fetchBlob(url, blobType, method, body) {\n    return this[p.fetch](url, blobType, method, body)\n      .then((response) => response.blob());\n  }\n\n  /**\n   * Request a content of the specified type from a specified URL.\n   *\n   * @param {string} url The URL to send the request to.\n   * @param {string} accept The content mime type (eg. image/jpeg).\n   * @param {string=} method The HTTP method (defaults to \"GET\").\n   * @param {Object=} body An object of key/value.\n   * @return {Promise<Response>}\n   * @private\n   */\n  [p.fetch](url, accept, method = 'GET', body = undefined) {\n    method = method.toUpperCase();\n\n    const req = {\n      method,\n      headers: { Accept: accept },\n      cache: 'no-store',\n    };\n\n    if (this[p.settings].session) {\n      // The user is logged in, we authenticate the request.\n      req.headers.Authorization = `Bearer ${this[p.settings].session}`;\n    }\n\n    if (body !== undefined) {\n      req.headers['Content-Type'] = 'application/json;charset=UTF-8';\n      req.body = JSON.stringify(body);\n    }\n\n    return fetch(url, req)\n      .then((res) => {\n        if (!res.ok) {\n          throw new HttpError(res.status);\n        }\n\n        return res;\n      });\n  }\n}\n","'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\nimport { HttpError } from '../common/errors';\n\n// Private members\nconst p = Object.freeze({\n  // Properties,\n  api: Symbol('api'),\n  settings: Symbol('settings'),\n\n  // Methods:\n  listenForMessages: Symbol('listenForMessages'),\n});\n\nexport default class WebPush extends EventDispatcher {\n  constructor(api, settings) {\n    super(['message']);\n\n    this[p.api] = api;\n    this[p.settings] = settings;\n\n    Object.seal(this);\n  }\n\n  subscribeToNotifications() {\n    if (!navigator.serviceWorker) {\n      return Promise.reject('No service worker supported');\n    }\n\n    navigator.serviceWorker.addEventListener('message',\n      this[p.listenForMessages].bind(this));\n\n    return navigator.serviceWorker.ready\n      .then(\n        (reg) => reg.pushManager.getSubscription()\n          .then((existing) =>\n            existing || reg.pushManager.subscribe({ userVisibleOnly: true })\n          )\n      )\n      .then((subscription) =>\n        // The server checks for duplicates\n        this[p.api].post('subscriptions', {\n          subscription,\n          title: `Browser ${navigator.userAgent}`,\n        })\n      )\n      .catch((error) => {\n        if (Notification.permission === 'denied') {\n          throw new Error('Permission request was denied.');\n        }\n\n        // \"409 Conflict\" HTTP result is OK.\n        if ((error instanceof HttpError) && error.statusCode === 409) {\n          return;\n        }\n\n        throw new Error(\n          `There was an error while subscribing to push notifications: ${error}`\n        );\n      });\n  }\n\n  [p.listenForMessages](evt) {\n    if (!evt.data) {\n      console.error('Received a push message without a payload.');\n      return;\n    }\n    this.emit('message', evt.data);\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  settings: Symbol('settings'),\n  net: Symbol('net'),\n\n  // Private methods.\n  getURL: Symbol('getURL'),\n  onceOnline: Symbol('onceOnline'),\n  onceReady: Symbol('onceReady'),\n  getChannelValues: Symbol('getChannelValues'),\n  updateChannelValue: Symbol('updateChannelValue'),\n});\n\n/**\n * Instance of the API class is intended to abstract consumer from the API\n * specific details (e.g. API base URL and version). It also tracks\n * availability of the network, API host and whether correct user session is\n * established. If any of this conditions is not met all API requests are\n * blocked until it's possible to perform them, so consumer doesn't have to\n * care about these additional checks.\n */\nexport default class API {\n  constructor(net, settings) {\n    this[p.net] = net;\n    this[p.settings] = settings;\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Performs HTTP 'GET' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @return {Promise}\n   */\n  get(path) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path)));\n  }\n\n  /**\n   * Performs HTTP 'POST' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'POST' body.\n   * @return {Promise}\n   */\n  post(path, body) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'POST', body));\n  }\n\n  /**\n   * Performs HTTP 'PUT' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'PUT' body.\n   * @return {Promise}\n   */\n  put(path, body) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'PUT', body));\n  }\n\n  /**\n   * Performs HTTP 'DELETE' API request and accepts JSON as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'DELETE' body.\n   * @return {Promise}\n   */\n  delete(path, body) {\n    return this[p.onceReady]()\n      .then(() => this[p.net].fetchJSON(this[p.getURL](path), 'DELETE', body));\n  }\n\n  /**\n   * Performs either HTTP 'GET' or 'PUT' (if body parameter is specified) API\n   * request and accepts Blob as response.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path.\n   * @param {Object=} body Optional object that will be serialized to JSON\n   * string and sent as 'PUT' body.\n   * @param {string=} accept Mime type of the Blob we expect as a response\n   * (default is image/jpeg).\n   * @return {Promise}\n   */\n  blob(path, body, accept = 'image/jpeg') {\n    return this[p.onceReady]()\n      .then(() => {\n        if (body) {\n          return this[p.net].fetchBlob(\n            this[p.getURL](path), accept, 'PUT', body\n          );\n        }\n\n        return this[p.net].fetchBlob(this[p.getURL](path), accept);\n      });\n  }\n\n  /**\n   * Creates a fully qualified API URL based on predefined base origin, API\n   * version and specified resource path.\n   *\n   * @param {string} path Specific API resource path to be used in conjunction\n   * with the base API path and version.\n   * @return {string}\n   * @private\n   */\n  [p.getURL](path) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('Path should be a valid non-empty string.');\n    }\n\n    return `${this[p.net].origin}/api/v${this[p.settings].apiVersion}/${path}`;\n  }\n\n  /**\n   * Returns a promise that is resolved once API is ready to use (API host is\n   * online).\n   * In the future we can add more checks like:\n   * * User is authenticated\n   * * Document is visible\n   *\n   * @returns {Promise}\n   * @private\n   */\n  [p.onceReady]() {\n    return Promise.all([\n      this[p.onceOnline](),\n    ]);\n  }\n\n  /**\n   * Returns a promise that is resolved once API host is discovered and online.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  [p.onceOnline]() {\n    const net = this[p.net];\n    if (net.online) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => net.once('online', () => resolve()));\n  }\n}\n","'use strict';\n\nconst p = Object.freeze({\n  api: Symbol('api'),\n  settings: Symbol('settings'),\n});\n\nexport default class Reminders {\n  constructor(api, settings) {\n    this[p.api] = api;\n    this[p.settings] = settings;\n\n    Object.seal(this);\n  }\n\n  /**\n   * Retrieves the list of the reminders.\n   *\n   * @return {Promise<Array>} A promise that resolves with an array of objects.\n   */\n  getAll() {\n    return this[p.api].get('reminders');\n  }\n\n  /**\n   * Gets a reminder given its id.\n   *\n   * @param {string} id The ID of the reminder to retrieve.\n   * @return {Promise}\n   */\n  get(id) {\n    return this[p.api].get(`reminders/${id}`);\n  }\n\n  /**\n   * Create a new reminder.\n   *\n   * @param {Object} body\n   * @return {Promise}\n   */\n  set(body) {\n    return this[p.api].post(`reminders`, body);\n  }\n\n  /**\n   * Delete a reminder given its ID.\n   *\n   * @param {string} id The ID of the reminder to delete.\n   * @return {Promise}\n   */\n  delete(id) {\n    return this[p.api].delete(`reminders/${id}`);\n  }\n}\n","/* global URLSearchParams */\n\n'use strict';\n\nimport EventDispatcher from '../common/event-dispatcher';\n\nimport Settings from './settings';\nimport Network from './network';\nimport WebPush from './webpush';\nimport API from './api';\nimport Reminders from './reminders';\n\n// Private members.\nconst p = Object.freeze({\n  // Private properties.\n  settings: Symbol('settings'),\n  net: Symbol('net'),\n  webPush: Symbol('webPush'),\n  api: Symbol('api'),\n});\n\nexport default class Server extends EventDispatcher {\n  constructor({ settings, net } = {}) {\n    super(['login', 'online', 'push-message']);\n\n    // Private properties.\n    this[p.settings] = settings || new Settings();\n    this[p.net] = net || new Network(this[p.settings]);\n    this[p.api] = new API(this[p.net], this[p.settings]);\n    this[p.webPush] = new WebPush(this[p.api], this[p.settings]);\n\n    // Init\n    this.reminders = new Reminders(this[p.api], this[p.settings]);\n\n    this[p.net].on('online', (online) => this.emit('online', online));\n    this[p.webPush].on('message', (msg) => this.emit('push-message', msg));\n\n    window.server = this;\n\n    Object.seal(this);\n  }\n\n  /**\n   * Clear all data/settings stored on the browser. Use with caution.\n   *\n   * @param {boolean} ignoreServiceWorker\n   * @return {Promise}\n   */\n  clear(ignoreServiceWorker = true) {\n    const promises = [this[p.settings].clear()];\n\n    if (!navigator.serviceWorker && !ignoreServiceWorker) {\n      promises.push(navigator.serviceWorker.ready\n        .then((registration) => registration.unregister()));\n    }\n\n    return Promise.all(promises);\n  }\n\n  get online() {\n    return this[p.net].online;\n  }\n\n  get isLoggedIn() {\n    return !!this[p.settings].session;\n  }\n\n  /**\n   * Authenticate a user.\n   *\n   * @param {string} user\n   * @param {string} password\n   * @return {Promise}\n   */\n  login(user, password) {\n    return this[p.api].post('login', { user, password })\n      .then((res) => {\n        this[p.settings].session = res.token;\n        this.emit('login');\n      });\n  }\n\n  /**\n   * Log out the user.\n   *\n   * @return {Promise}\n   */\n  logout() {\n    this[p.settings].session = null;\n    return Promise.resolve();\n  }\n\n  /**\n   * Ask the user to accept push notifications from the server.\n   * This method will be called each time that we log in, but will stop the\n   * execution if we already have the push subscription information.\n   *\n   * @return {Promise}\n   */\n  subscribeToNotifications() {\n    if (!this.isLoggedIn) {\n      return Promise.reject(new Error(\n        'Error while subscribing to push notifications: user is not logged in'\n      ));\n    }\n    return this[p.webPush].subscribeToNotifications();\n  }\n}\n","import BaseController from './base';\nimport UsersController from './users';\nimport RemindersController from './reminders';\n\nimport SpeechController from '../lib/speech-controller';\nimport Server from '../lib/server/index';\n\nconst p = Object.freeze({\n  controllers: Symbol('controllers'),\n  speechController: Symbol('speechController'),\n  server: Symbol('server'),\n  subscribeToNotifications: Symbol('subscribeToNotifications'),\n\n  onHashChanged: Symbol('onHashChanged'),\n});\n\nexport default class MainController extends BaseController {\n  constructor() {\n    super();\n\n    const mountNode = document.querySelector('.app-view-container');\n    const speechController = new SpeechController();\n    const server = new Server();\n    const options = { mountNode, speechController, server };\n\n    const usersController = new UsersController(options);\n    const remindersController = new RemindersController(options);\n\n    this[p.controllers] = {\n      '': usersController,\n      'users/(.+)': usersController,\n      'reminders': remindersController,\n    };\n\n    this[p.speechController] = speechController;\n    this[p.server] = server;\n\n    window.addEventListener('hashchange', this[p.onHashChanged].bind(this));\n  }\n\n  main() {\n    if (screen && 'orientation' in screen && 'lock' in screen.orientation) {\n      screen.orientation.lock('landscape')\n        .catch((e) => {\n          console.error(e);\n        });\n    }\n\n    this[p.speechController].start()\n      .then(() => {\n        console.log('Speech controller started');\n      });\n\n    this[p.server].on('login', () => this[p.subscribeToNotifications]());\n    this[p.server].on('push-message', (message) => {\n      // if we're in \"speaking reminders\" mode (which is \"always\", currently)\n      this[p.speechController].speak(`${message.title}: ${message.body}`);\n    });\n\n    location.hash = '';\n\n    setTimeout(() => {\n      if (this[p.server].isLoggedIn) {\n        this[p.subscribeToNotifications]();\n        location.hash = 'reminders';\n      } else {\n        location.hash = 'users/login';\n      }\n    });\n  }\n\n  /**\n   * Handles hash change event and routes to the right controller.\n   *\n   * @private\n   */\n  [p.onHashChanged]() {\n    const route = window.location.hash.slice(1);\n\n    for (const routeName of Object.keys(this[p.controllers])) {\n      const match = route.match(new RegExp(`^${routeName}$`));\n      if (match) {\n        this[p.controllers][routeName].main(...match.slice(1));\n        break;\n      }\n    }\n  }\n\n  [p.subscribeToNotifications]() {\n    this[p.server].subscribeToNotifications()\n      .catch((err) => {\n        console.error('Error while subscribing to notifications:', err);\n      });\n  }\n}\n","import MainController from './controllers/main';\n\nconst mainController = new MainController();\nmainController.main();\n"],"names":["HttpError","statusCode","message","name","call","this","jsx","REACT_ELEMENT_TYPE","Symbol","for","type","props","key","children","defaultProps","childrenLength","arguments","length","propName","childArray","Array","i","$$typeof","undefined","ref","_owner","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","descriptor","enumerable","configurable","writable","Object","defineProperty","protoProps","staticProps","prototype","inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","toConsumableArray","arr","isArray","arr2","from","BaseController","properties","assign","main","Error","UserLogin","_React$Component","state","server","onChange","_this","bind","onFormSubmit","evt","login","setState","preventDefault","then","hash","render","React","Component","ALLOWED_ACTIONS","DEFAULT_ACTION","UsersController","action","includes","error","logout","createElement","mountNode","COLOURS","ReminderItem","set_data","TwitterCldrDataBundle","listFormatter","TwitterCldr","ListFormatter","reminder","onDelete","getColour","recipients","join","string","chr","len","charCodeAt","contentClassName","moment","datetime","format","content","Reminders","speechController","refreshInterval","debugEvent","onReminder","onWebPushMessage","locale","navigator","languages","language","componentDidMount","reminders","getAll","map","id","due","setInterval","_this2","idle","reload","on","componentWillUnmount","off","result","log","set","users","Number","time","savedReminder","_this3","push","confirmation","speak","catch","res","delete","_this4","filter","fullMessage","sort","a","b","_","groupBy","keys","forEach","month","reminderNodes","reminderMonth","date","remindersDay","_this5","Microphone","bleep","Audio","src","pause","currentTime","play","isListening","click","stopSpeechRecognition","startSpeechRecognition","isLoggedIn","className","RemindersController","document","querySelector","assertValidEventName","eventName","assertValidHandler","handler","assertAllowedEventName","allowedEvents","indexOf","p","freeze","EventDispatcher","listeners","Map","handlers","get","Set","add","once","parameters","size","offAll","clear","emit","hasListeners","has","WakeWordRecogniser","options","minimumConfidence","bufferCount","maxVoiceActivityGap","numGroups","groupSize","recogniser","JsSpeechRecognizer","keywordSpottingMinimumConfidence","keywordSpottingBufferCount","keywordSpottingMaxVoiceActivityGap","seal","startListening","Promise","resolve","closeMic","openMic","isRecording","startKeywordSpottingRecording","stopListening","stopRecording","loadModel","modelData","model","setOnKeywordSpottedCallback","fn","keywordSpottedCallback","SpeechRecogniser","Recognition","window","SpeechRecognition","webkitSpeechRecognition","supportsRecognition","recognition","continuous","listenForUtterance","reject","onresult","event","stop","results","confidence","transcript","onerror","start","abort","VOICE_PITCH","VOICE_RATE","SpeechSynthesis","synthesis","speechSynthesis","initialised","supportsSynthesis","preferredVoice","setPreferredVoice","onvoiceschanged","text","utterance","SpeechSynthesisUtterance","voice","lang","pitch","rate","voices","getVoices","englishVoices","startsWith","femaleVoices","DEFAULT_LOCALE","PATTERNS","user","replace","Confirmation","getReminderMessage","template","getLocalised","data","formatUser","formatAction","formatTime","match","placeholder","prop","PATTERN1","RegExp","PATTERN2","test","isToday","hour","formatHoursAndMinutes","isTomorrow","_hour","isThisMonth","today","startOf","tomorrow","isBetween","in2days","thisMonth","nextMonth","minute","nextHour","IntentParser","patterns","init","intentParser","parse","phrase","successful","some","pattern","regexp","segments","exec","shift","parseUsers","placeholders","parseAction","parseDatetime","split","listBreaker","trim","chrono","parseDate","normalise","punctuation","buildPatterns","tokens","splitOnPlaceholders","order","placeholderIndex","token","substr","escape","index","c","EVENT_INTERFACE","SpeechController","_EventDispatcher","wakewordModelUrl","speechRecogniser","wakewordRecogniser","initialiseSpeechRecognition","startListeningForWakeword","stopListeningForWakeword","handleSpeechRecognitionEnd","err","fetch","response","json","PREFIX","ORIGIN","API_VERSION","UPPER_CASE_REGEX","settings","Settings","storage","localStorage","values","settingName","setting","settingStringValue","getItem","stringToSettingTypedValue","addEventListener","onStorage","updateSetting","getDefaultSettingValue","newValue","currentValue","setItem","removeItem","part","toLowerCase","stringValue","defaultValue","substring","find","warn","SESSION","Network","online","onLine","connection","fetchJSON","url","method","body","accept","contentType","headers","ok","fetchBlob","blobType","blob","toUpperCase","req","Accept","session","Authorization","JSON","stringify","status","origin","WebPush","api","subscribeToNotifications","serviceWorker","listenForMessages","ready","reg","pushManager","getSubscription","existing","subscribe","userVisibleOnly","subscription","post","userAgent","Notification","permission","API","net","path","onceReady","getURL","put","apiVersion","all","onceOnline","Server","webPush","msg","ignoreServiceWorker","promises","registration","unregister","password","MainController","_BaseController","usersController","remindersController","controllers","onHashChanged","screen","orientation","lock","e","title","route","location","slice","routeName","mainController"],"mappings":"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","sourceRoot":"/source/"}